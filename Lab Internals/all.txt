
// --- Start of BFTL.java ---
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Queue;

class BFTL {
    private List<List<Integer>> adjList;
    private int vertices;

    public BFTL(int size) {
        vertices = size;
        adjList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            adjList.add(new LinkedList<>());
        }
    }

    public void addEdge(int u, int v) {
        adjList.get(u).add(v);
        adjList.get(v).add(u);
    }

    public void printBFT(int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited[start] = true;
        System.out.print("BFT: ");
        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");
            for (int neighbor : adjList.get(vertex)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        BFTL graph = new BFTL(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.printBFT(0); // Start BFT from vertex 0
    }
}
// --- End of BFTL.java ---

// Output:
// BFT: 0 1 2 3 4

// --- Start of BFTM.java ---
import java.util.LinkedList;
import java.util.Queue;

class BFTM {
    private int[][] adjMatrix;
    private int vertices;

    public BFTM(int size) {
        vertices = size;
        adjMatrix = new int[size][size];
    }

    public void addEdge(int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1;
    }

    public void printBFT(int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        visited[start] = true;
        System.out.print("BFT: ");
        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");
            for (int i = 0; i < vertices; i++) {
                if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                    queue.add(i);
                    visited[i] = true;
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        BFTM graph = new BFTM(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.printBFT(0);
    }
}
// --- End of BFTM.java ---

// Output:
// BFT: 0 1 2 3 4

// --- Start of DFTL.java ---
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;

class DFTL {
    private List<List<Integer>> adjList;
    private int vertices;

    public DFTL(int size) {
        vertices = size;
        adjList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            adjList.add(new LinkedList<>());
        }
    }

    public void addEdge(int u, int v) {
        adjList.get(u).add(v);
        adjList.get(v).add(u);
    }

    public void printDFT(int start) {
        boolean[] visited = new boolean[vertices];
        Stack<Integer> stack = new Stack<>();
        stack.push(start);
        System.out.print("DFT: ");
        while (!stack.isEmpty()) {
            int vertex = stack.pop();
            if (!visited[vertex]) {
                System.out.print(vertex + " ");
                visited[vertex] = true;
                for (int neighbor : adjList.get(vertex)) {
                    if (!visited[neighbor]) {
                        stack.push(neighbor);
                    }
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DFTL graph = new DFTL(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.printDFT(0); // Start DFT from vertex 0
    }
}
// --- End of DFTL.java ---

// Output:
// DFT: 0 2 4 1 3

// --- Start of DFTM.java ---
import java.util.Stack;

class DFTM {
    private int[][] adjMatrix;
    private int vertices;

    public DFTM(int size) {
        vertices = size;
        adjMatrix = new int[size][size];
    }

    public void addEdge(int u, int v) {
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1; // For undirected graph
    }

    public void printDFT(int start) {
        boolean[] visited = new boolean[vertices];
        Stack<Integer> stack = new Stack<>();
        stack.push(start);
        System.out.print("DFT: ");
        while (!stack.isEmpty()) {
            int vertex = stack.pop();
            if (!visited[vertex]) {
                System.out.print(vertex + " ");
                visited[vertex] = true;
                for (int i = 0; i < vertices; i++) {
                    if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                        stack.push(i);
                    }
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DFTM graph = new DFTM(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.printDFT(0);
    }
}
// --- End of DFTM.java ---

// Output:
// DFT: 0 2 4 1 3

// --- Start of JobSequencing.java ---
import java.util.*;

class Job {
    int id, deadline, profit;

    Job(int id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
}

public class JobSequencing {
    public static void jobScheduling(Job[] jobs) {
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);
        int maxDeadline = Arrays.stream(jobs).mapToInt(j -> j.deadline).max().orElse(0);
        boolean[] slots = new boolean[maxDeadline];
        List<Integer> scheduledJobs = new ArrayList<>();

        for (Job job : jobs)
            for (int j = Math.min(maxDeadline, job.deadline) - 1; j >= 0; j--)
                if (!slots[j]) {
                    slots[j] = true;
                    scheduledJobs.add(job.id);
                    break;
                }

        System.out.println("Scheduled Jobs: " + scheduledJobs);
    }

    public static void main(String[] args) {
        jobScheduling(new Job[] {
                new Job(1, 4, 20),
                new Job(2, 1, 10),
                new Job(3, 1, 40),
                new Job(4, 1, 30),
                new Job(5, 3, 50) });
    }
}
// --- End of JobSequencing.java ---

// Output:
// Scheduled Jobs: [5, 3, 1]

// --- Start of KnapsackBT.java ---
public class KnapsackBT {
    static int maxProfit = 0;

    static void knapsack(int i, int profit, int weight, int[] val, int[] wt, int n, int W) {
        if (weight <= W && profit > maxProfit)
            maxProfit = profit;
        if (i == n)
            return;
        knapsack(i + 1, profit + val[i], weight + wt[i], val, wt, n, W);
        knapsack(i + 1, profit, weight, val, wt, n, W);
    }

    public static void main(String[] args) {
        int val[] = { 60, 100, 120 };
        int wt[] = { 10, 20, 30 };
        int W = 50;
        int n = val.length;

        knapsack(0, 0, 0, val, wt, n, W);
        System.out.println("Maximum value (Backtracking): " + maxProfit);
    }
}
// --- End of KnapsackBT.java ---

// Output:
// Maximum value (Backtracking): 220

// --- Start of KnapsackDP.java ---
public class KnapsackDP {
    static int knapsack(int W, int wt[], int val[], int n) {
        int[][] K = new int[n + 1][W + 1];

        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0)
                    K[i][w] = 0;
                else if (wt[i - 1] <= w)
                    K[i][w] = Math.max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
                else
                    K[i][w] = K[i - 1][w];
            }
        }
        return K[n][W];
    }

    public static void main(String[] args) {
        int val[] = { 60, 100, 120 };
        int wt[] = { 10, 20, 30 };
        int W = 50;
        int n = val.length;
        System.out.println("Maximum value: " + knapsack(W, wt, val, n));
    }
}
// --- End of KnapsackDP.java ---

// Output:
// Maximum value: 220

// --- Start of MaxHeap.java ---
class MaxHeap {
    private int[] heap;
    private int size;

    public MaxHeap(int capacity) {
        heap = new int[capacity];
        size = 0;
    }

    public void insert(int value) {
        if (size < heap.length) {
            heap[size] = value;
            int index = size;
            while (index > 0) {
                int parent = (index - 1) / 2;
                if (heap[index] > heap[parent]) {
                    swap(index, parent);
                    index = parent;
                } else {
                    break;
                }
            }
            size++;
        }
    }

    public int delete() {
        if (size == 0)
            return -1;
        int max = heap[0];
        heap[0] = heap[size - 1];
        size--;

        int index = 0;
        while (true) {
            int left = 2 * index + 1;
            int right = 2 * index + 2;
            int largest = index;

            if (left < size && heap[left] > heap[largest]) {
                largest = left;
            }
            if (right < size && heap[right] > heap[largest]) {
                largest = right;
            }
            if (largest == index) {
                break;
            }

            swap(index, largest);
            index = largest;
        }

        return max;
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    public void display() {
        for (int i = 0; i < size; i++) {
            System.out.print(heap[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MaxHeap maxHeap = new MaxHeap(10);
        maxHeap.insert(5);
        maxHeap.insert(3);
        maxHeap.insert(8);
        maxHeap.insert(1);
        System.out.print("MaxHeap before delete: ");
        maxHeap.display();
        System.out.println("Deleted from MaxHeap: " + maxHeap.delete());
        System.out.print("MaxHeap after delete: ");
        maxHeap.display();
    }
}
// --- End of MaxHeap.java ---

// Output:
// MaxHeap before delete: 8 5 3 1
// Deleted from MaxHeap: 8
// MaxHeap after delete: 5 1 3

// --- Start of MinHeap.java ---
class MinHeap {
    private int[] heap;
    private int size;

    public MinHeap(int capacity) {
        heap = new int[capacity];
        size = 0;
    }

    public void insert(int value) {
        if (size < heap.length) {
            heap[size] = value;
            int index = size;
            while (index > 0) {
                int parent = (index - 1) / 2;
                if (heap[index] < heap[parent]) { // Change: Min-heap condition
                    swap(index, parent);
                    index = parent;
                } else {
                    break;
                }
            }
            size++;
        }
    }

    public int delete() {
        if (size == 0)
            return -1; // or throw an exception

        int min = heap[0];
        heap[0] = heap[size - 1];
        size--;

        int index = 0;
        while (true) {
            int left = 2 * index + 1;
            int right = 2 * index + 2;
            int smallest = index;

            if (left < size && heap[left] < heap[smallest]) { // Change: Min-heap condition
                smallest = left;
            }
            if (right < size && heap[right] < heap[smallest]) { // Change: Min-heap condition
                smallest = right;
            }
            if (smallest == index) {
                break;
            }

            swap(index, smallest);
            index = smallest;
        }

        return min;
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    public void display() {
        for (int i = 0; i < size; i++) {
            System.out.print(heap[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MinHeap minHeap = new MinHeap(10);
        minHeap.insert(5);
        minHeap.insert(3);
        minHeap.insert(8);
        minHeap.insert(1);
        System.out.print("MinHeap before delete: ");
        minHeap.display();
        System.out.println("Deleted from MinHeap: " + minHeap.delete());
        System.out.print("MinHeap after delete: ");
        minHeap.display();
    }
}
// --- End of MinHeap.java ---

// Output:
// MinHeap before delete: 1 3 8 5
// Deleted from MinHeap: 1
// MinHeap after delete: 3 5 8

// --- Start of MergeSort.java ---
public class MergeSort {

    public static void mergeSort(int[] array) {
        if (array.length < 2)
            return;
        int[] tempArray = new int[array.length];
        mergeSort(array, tempArray, 0, array.length - 1);
    }

    private static void mergeSort(int[] array, int[] tempArray, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;
            mergeSort(array, tempArray, left, middle);
            mergeSort(array, tempArray, middle + 1, right);
            merge(array, tempArray, left, middle, right);
        }
    }

    private static void merge(int[] array, int[] tempArray, int left, int middle, int right) {
        for (int i = left; i <= right; i++) {
            tempArray[i] = array[i];
        }
        int i = left, j = middle + 1, k = left;
        while (i <= middle && j <= right) {
            if (tempArray[i] <= tempArray[j]) {
                array[k++] = tempArray[i++];
            } else {
                array[k++] = tempArray[j++];
            }
        }
        while (i <= middle) {
            array[k++] = tempArray[i++];
        }
    }

    public static void displayArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] array = { 56, 23, 78, 12, 34, 89, 45, 67, 90, 10 };

        System.out.println("Original Array:");
        displayArray(array);

        long startTime = System.nanoTime();
        mergeSort(array);
        long endTime = System.nanoTime();

        System.out.println("\nSorted Array:");
        displayArray(array);

        System.out.println("\nExecution Time for Merge Sort: " + (endTime - startTime) + " nanoseconds");
    }
}
// --- End of MergeSort.java ---

// Output:
// Original Array:
// 56 23 78 12 34 89 45 67 90 10
//
// Sorted Array:
// 10 12 23 34 45 56 67 78 89 90
//
// Execution Time for Merge Sort: <time in nanoseconds>

// --- Start of NQueens.java ---
public class NQueens {
    static final int N = 4;

    static boolean isSafe(int board[][], int row, int col) {
        for (int i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;
        for (int i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;
        return true;
    }

    static boolean solveNQUtil(int board[][], int col) {
        if (col >= N)
            return true;
        for (int i = 0; i < N; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 1;
                if (solveNQUtil(board, col + 1))
                    return true;
                board[i][col] = 0;
            }
        }
        return false;
    }

    static void printSolution(int board[][]) {
        for (int[] row : board) {
            for (int cell : row)
                System.out.print(cell + " ");
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] board = new int[N][N];
        if (!solveNQUtil(board, 0)) {
            System.out.println("Solution does not exist");
        } else {
            printSolution(board);
        }
    }
}
// --- End of NQueens.java ---

// Output:
// 0 0 1 0
// 1 0 0 0
// 0 0 0 1
// 0 1 0 0

// --- Start of QuickSort.java ---
public class QuickSort {

    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(array, low, high);
            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }

    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                swap(array, i, j);
            }
        }
        swap(array, i + 1, high);
        return i + 1;
    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public static void displayArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] array = { 56, 23, 78, 12, 34, 89, 45, 67, 90, 10 };

        System.out.println("Original Array:");
        displayArray(array);

        long startTime = System.nanoTime();
        quickSort(array, 0, array.length - 1);
        long endTime = System.nanoTime();

        System.out.println("\nSorted Array:");
        displayArray(array);

        System.out.println("\nExecution Time for Quick Sort: " + (endTime - startTime) + " nanoseconds");
    }
}
// --- End of QuickSort.java ---

// Output:
// Original Array:
// 56 23 78 12 34 89 45 67 90 10
//
// Sorted Array:
// 10 12 23 34 45 56 67 78 89 90
//
// Execution Time for Quick Sort: <time in nanoseconds>

// --- Start of SSSPAL.java ---
import java.util.*;

public class SSSPAL {
    static class Edge {
        int target, weight;

        Edge(int target, int weight) {
            this.target = target;
            this.weight = weight;
        }
    }

    public static void dijkstra(List<List<Edge>> graph, int start) {
        int n = graph.size();
        int INF = Integer.MAX_VALUE;
        int[] dist = new int[n];
        boolean[] visited = new boolean[n];

        Arrays.fill(dist, INF);
        dist[start] = 0;

        PriorityQueue<Edge> queue = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
        queue.offer(new Edge(start, 0));

        while (!queue.isEmpty()) {
            Edge current = queue.poll();
            int u = current.target;

            if (visited[u])
                continue;
            visited[u] = true;

            for (Edge edge : graph.get(u)) {
                int v = edge.target, weight = edge.weight;

                if (!visited[v] && dist[u] != INF) {
                    int newDist = dist[u] + weight;
                    if (newDist >= 0 && newDist < dist[v]) { // Prevent integer overflow
                        dist[v] = newDist;
                        queue.offer(new Edge(v, newDist));
                    }
                }
            }
        }

        printSolution(dist);
    }

    private static void printSolution(int[] dist) {
        System.out.println("Vertex Distance from Source:");
        for (int i = 0; i < dist.length; i++)
            System.out.println(i + " \t " + (dist[i] == Integer.MAX_VALUE ? "INF" : dist[i]));
    }

    public static void main(String[] args) {
        int size = 5;
        List<List<Edge>> graph = new ArrayList<>();

        for (int i = 0; i < size; i++)
            graph.add(new ArrayList<>());

        int[][] edges = {
                { 0, 1, 3 }, { 0, 3, 7 }, { 1, 2, 2 }, { 2, 3, 5 }, { 2, 4, 1 }, { 3, 4, 4 }
        };

        for (int[] edge : edges)
            graph.get(edge[0]).add(new Edge(edge[1], edge[2]));

        long startTime = System.nanoTime();
        dijkstra(graph, 0);
        System.out.println("\nExecution Time: " + (System.nanoTime() - startTime) + " ns");
    }
}
// --- End of SSSPAL.java ---

// Output:
// Vertex Distance from Source:
// 0 0
// 1 3
// 2 5
// 3 7
// 4 6
//
// Execution Time: <time in nanoseconds>

// --- Start of SSSPAM.java ---
import java.util.Arrays;

public class SSSPAM {
    private static final int INF = Integer.MAX_VALUE;

    public static void dijkstra(int[][] graph, int start) {
        int n = graph.length;
        int[] dist = new int[n];
        boolean[] visited = new boolean[n];

        Arrays.fill(dist, INF);
        dist[start] = 0;

        for (int count = 0; count < n; count++) {
            int u = minDistance(dist, visited);
            if (u == -1)
                break; // No reachable vertex left
            visited[u] = true;

            for (int v = 0; v < n; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] != INF) {
                    int newDist = dist[u] + graph[u][v];
                    if (newDist >= 0 && newDist < dist[v]) {
                        dist[v] = newDist;
                    }
                }
            }
        }

        System.out.println("\nVertex Distance from Source:");
        for (int i = 0; i < n; i++)
            System.out.println(i + " \t " + (dist[i] == INF ? "INF" : dist[i]));
    }

    private static int minDistance(int[] dist, boolean[] visited) {
        int minIndex = -1, min = INF;
        for (int i = 0; i < dist.length; i++)
            if (!visited[i] && dist[i] < min)
                min = dist[minIndex = i];
        return minIndex;
    }

    public static void main(String[] args) {
        int[][] graph = {
                { 0, 3, INF, 7, INF },
                { 3, 0, 2, INF, INF },
                { INF, 2, 0, 5, 1 },
                { 7, INF, 5, 0, 4 },
                { INF, INF, 1, 4, 0 }
        };

        long startTime = System.nanoTime();
        dijkstra(graph, 0);
        System.out.println("\nExecution Time: " + (System.nanoTime() - startTime) + " ns");
    }
}
// --- End of SSSPAM.java ---

// Output:
// Vertex Distance from Source:
// 0 0
// 1 3
// 2 5
// 3 7
// 4 6
//
// Execution Time: <time in nanoseconds>

// --- Start of TSPBranchBound.java ---
import java.util.*;

public class TSPBranchBound {
    static final int N = 4;

    static int tsp(int[][] graph, boolean[] visited, int pos, int count, int cost, int ans) {
        if (count == N && graph[pos][0] > 0) {
            ans = Math.min(ans, cost + graph[pos][0]);
            return ans;
        }

        for (int i = 0; i < N; i++) {
            if (!visited[i] && graph[pos][i] > 0) {
                visited[i] = true;
                ans = tsp(graph, visited, i, count + 1, cost + graph[pos][i], ans);
                visited[i] = false;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int[][] graph = {
                { 0, 10, 15, 20 },
                { 10, 0, 35, 25 },
                { 15, 35, 0, 30 },
                { 20, 25, 30, 0 }
        };
        boolean[] visited = new boolean[N];
        visited[0] = true;
        int ans = tsp(graph, visited, 0, 1, 0, Integer.MAX_VALUE);
        System.out.println("Minimum cost: " + ans);
    }
}
// --- End of TSPBranchBound.java ---

// Output:
// Minimum cost: 80